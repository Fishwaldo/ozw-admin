#include <QtCore>

class QTOZWManager {
    PROP(bool running SOURCEONLYSETTER)
    PROP(uint32_t homeId SOURCEONLYSETTER)
    SLOT(bool Start(QString SerialPort))
    SLOT(bool refreshNodeInfo(uint8_t _node))
    SLOT(bool requestNodeState(uint8_t _node))
    SLOT(bool requestNodeDynamic(uint8_t _node))
    SIGNAL(nodeNew(uint8_t node))
    SIGNAL(nodeAdded(uint8_t node))
    SIGNAL(nodeRemoved(uint8_t node))
    SIGNAL(nodeReset(uint8_t node))
    SIGNAL(nodeNaming(uint8_t node))
    SIGNAL(nodeEvent(uint8_t node, uint8_t event))
    SIGNAL(nodeProtocolInfo(uint8_t node))
    SIGNAL(nodeEssentialNodeQueriesComplete(uint8_t node))
    SIGNAL(nodeQueriesComplete(uint8_t node))
    SIGNAL(driverReady(uint32_t homeID))
    SIGNAL(driverFailed(uint32_t homeID))
    SIGNAL(driverReset(uint32_t homeID))
    SIGNAL(driverRemoved(uint32_t homeID))
    SIGNAL(driverAllNodesQueriedSomeDead())
    SIGNAL(driverAllNodesQueried())
    SIGNAL(driverAwakeNodesQueried())
    SIGNAL(controllerCommand(uint8_t command))
//    SIGNAL(ozwNotification(OpenZWave::Notification::NotificationCode event))
// SIGNAL(ozwUserAlert(OpenZWave::Notification::UserAlertNotification event))
    SIGNAL(manufacturerSpecificDBReady())

    SIGNAL(starting());
    SIGNAL(started(uint32_t homeID))
    SIGNAL(stopped(uint32_t homeID))

    ENUM QTOZWErrorCodes {
        homeId_Invalid,
        nodeId_Invalid,
        Manager_Not_Started,
        OZWException,
        setupFailed,
        NoError
    };


    SIGNAL(error(QTOZWErrorCodes errorcode))
    PROP(QString errorString SOURCEONLYSETTER)

    SLOT(bool setConfigParam(uint8_t _node, uint8_t _param, int32_t _value, uint8_t const _size))
    SLOT(void requestConfigParam(uint8_t _node, uint8_t _param))
    SLOT(void requestAllConfigParam(uint8_t _node))
    SLOT(void softResetController())
    SLOT(void hardResetController())

    SLOT(bool cancelControllerCommand())
    SLOT(void testNetworkNode(uint8_t _node, uint32_t const _count))
    SLOT(void testNetwork(uint32_t const _count))
    SLOT(void healNetworkNode(uint8_t _node, bool _doRR))
    SLOT(void healNetwork(bool _doRR))
    SLOT(bool addNode(bool _doSecure))
    SLOT(bool removeNode())
    SLOT(bool removeFailedNode(uint8_t _node))
    SLOT(bool hasNodeFailed(uint8_t _node))
    SLOT(bool requestNodeNeighborUpdate(uint8_t _node))
    SLOT(bool assignReturnRoute(uint8_t _node))
    SLOT(bool deleteAllReturnRoute(uint8_t _node))
    SLOT(bool sendNodeInfomation(uint8_t _node))
    SLOT(bool replaceFailedNode(uint8_t _node))
    SLOT(bool requestNetworkUpdate(uint8_t _node))

    SLOT(bool checkLatestConfigFileRevision(uint8_t const _node))
    SLOT(bool checkLatestMFSRevision())
    SLOT(bool downloadLatestConfigFileRevision(uint8_t const _node))
    SLOT(bool downloadLatestMFSRevision())

}
